
" vim-sublime - A minimal Sublime Text - like vim experience bundle
"               http://github.com/grigio/vim-sublime
" Best view with a 256 color terminal and Powerline fonts
" Updated by Dorian Neto (https://github.com/dorianneto)"

" Enable CTRL

if has('python3')
  silent! python3 1
endif

inoremap <silent> <F24> <C-\><C-O>:silent doautocmd FocusLost %<CR>
inoremap <silent> <F25> <C-\><C-O>:silent doautocmd FocusGained %<CR>

set guifont=Hack\ Nerd\ Font:h16

" Share ClipBoard
set clipboard=unnamed
set t_Co=256  " vim-monokai now only support 256 colours in terminal.

let &t_ut=''

"

let g:monokai_term_italic = 1
let g:monokai_gui_italic = 1

set re=1
set ttyfast
set lazyredraw
set nofsync

set belloff=all

let g:go_highlight_function_calls=1

command -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
    unlet g:qfix_win
  else
    copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction

" OPTION+F quickfix toggle
nmap <silent> <D-f> :QFix<CR>

" OPTION+SHIFT+F - Search in Project (RIPGREP)
map <D-F> :Rg<CR>



" Apple Keyboard Pasting with OPTION+v 
imap <D-v> <C-R>+
cmap <D-v> <C-R>+


set nocompatible
filetype off

set directory^=$HOME/tmp/hjvim
set backupdir^=$HOME/tmp/hjvim
let g:loaded_matchparen = 1
let g:DisableAutoPHPFolding = 1
let php_folding = 0


call plug#begin('~/.vim/plugged')
" ------Plugins-------
Plug 'equalsraf/neovim-gui-shim'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}
Plug 'bluz71/vim-moonfly-colors'
Plug 'RRethy/vim-illuminate'
Plug 'vim-vdebug/vdebug'
Plug 'tpope/vim-eunuch'
Plug 'vim-scripts/SyntaxRange'
Plug 'tpope/vim-markdown'
Plug 'justinmk/vim-syntax-extra'
Plug 'voldikss/vim-floaterm'


Plug 'neoclide/coc.nvim', {'branch': 'release'}


Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

"Plug 'jreybert/vimagit'
Plug 'mhinz/vim-signify'
Plug 'beyondwords/vim-twig'
Plug 'christoomey/vim-tmux-navigator'
Plug 'crusoexia/vim-monokai'
Plug 'phanviet/vim-monokai-pro'
Plug 'morhetz/gruvbox'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'rust-lang/rust.vim'
"Plug 'ctrlpvim/ctrlp.vim'
"Plug 'davidegx/ctrlp-smarttabs'
Plug 'dyng/ctrlsf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'empanda/vim-varnish'
""Plug 'gcmt/breeze.vim'
Plug 'hjanuschka/vim-danger'
Plug 'iberianpig/tig-explorer.vim'
"Plug 'janko-m/vim-test'
Plug 'jelera/vim-javascript-syntax'
""Plug 'jiangmiao/auto-pairs'
Plug 'vim-scripts/auto-pairs-gentle'
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'leshill/vim-json'
Plug 'maksimr/vim-jsbeautify'
Plug 'mhinz/vim-startify'
Plug 'milch/vim-fastlane'
Plug 'mxw/vim-jsx'
""Plug 'StanAngeloff/php.vim'
Plug 'osyo-manga/vim-over'
Plug 'pangloss/vim-javascript'
Plug 'rhysd/vim-clang-format'
""Plug 'ryanoasis/vim-devicons'
Plug 'terryma/vim-multiple-cursors'
""Plug 'thiagoalessio/rainbow_levels.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
"Plug 'tomtom/tcomment_vim'
"Plug 'tpope/vim-endwise'
Plug 'StanAngeloff/php.vim'
Plug 'tpope/vim-surround'
Plug 'tweekmonster/startuptime.vim'
Plug 'itchyny/lightline.vim'
Plug 'w0rp/ale'
Plug 'maximbaz/lightline-ale'


call plug#end()


" FZF Config
let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore-vcs  --hiden -i '
let g:fzf_buffers_jump = 1
let g:fzf_action = {
  \ 'ctrl-t': 'tab drop',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit'}




set iskeyword+=$





" make Esc happen without waiting for timeoutlen
" fixes Powerline delay
augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
augroup END


let g:ale_linters = {
\   'javascript': ['eslint'],
\   'haml': ['hamllint'],
\   'php': ['phpcs'],
\   'go': ['gofmt'],
\   'rust': ['rls']
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint', 'remove_trailing_lines', 'trim_whitespace'],
\   'javascript.jsx': ['prettier', 'eslint', 'remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop', 'remove_trailing_lines', 'trim_whitespace'],
\   'haml': ['hamllint', 'remove_trailing_lines', 'trim_whitespace'],
\   'php': ['php_cs_fixer', 'phpcbf'],
\   'rust': ['rustfmt'],
\   'go': ['gofmt'],
\   'sh': ['shmft', 'remove_trailing_lines', 'trim_whitespace'],
\   'c': ['clang-format', 'remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_php_phpcs_standard = "PSR2"
let g:ale_php_phpcbf_standard = 'PSR2'
let g:ale_set_highlights = 0

let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1



" JS as JSX
let g:jsx_ext_required = 0
set completeopt-=preview



let g:acp_enableAtStartup = 0


autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS


set hidden

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300


inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

map \ :
let mapleader = ','



silent! colorscheme monokai_pro

" Beatufiy
map <c-f> :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer>  <c-f> :ALEFix<cr>
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <c-f> :ALEFix<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType php noremap <buffer> <c-f> :ALEFix<cr>
autocmd FileType go noremap <buffer> <c-f> :GoFmt<cr>
autocmd FileType c,cpp,objc noremap <buffer> <c-f> :<C-u>ClangFormat<CR>


filetype plugin indent on

""""""""
if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Use :help 'option' to see the documentation for the given option.
set autoindent
set backspace=indent,eol,start
set showmatch
set showmode

set nrformats-=octal
set shiftround

set ttimeout
set ttimeoutlen=50

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

set autoread

set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

set tabstop=2 shiftwidth=2 expandtab
set textwidth=0 
set wrapmargin=0
set wrap!

"set listchars=tab:▒░,trail:▓
"set list

inoremap <C-U> <C-G>u<C-U>

"set relativenumber
set number
set hlsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" do not history when leavy buffer
set hidden

" FIXME: (broken) ctrl s to save
noremap  <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <Esc>:update<CR>


noremap  <D-s> :update<CR>
vnoremap <D-s> <C-C>:update<CR>
inoremap <D-s> <Esc>:update<CR>

set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

" exit insert mode
inoremap <C-c> <Esc>




"
" Plugins config
"
let g:lightline = {
  \   'colorscheme': 'powerline',
  \   'active': {
  \     'left':[ [ 'mode', 'paste' ],
  \              [ 'readonly', 'filename', 'modified' ]
  \     ]
  \   },
	\  'component': {
	\  'lineinfo': ' %3l:%-2v',
	\   }
  \ }
let g:lightline.separator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.subseparator = {
	\   'left': '', 'right': ''
  \}

let g:lightline.tabline = {
  \   'left': [ ['tabs'] ],
  \   'right': [ ['close'] ]
  \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \
      \}
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \
      \}

set showtabline=2  " Show tabline

"
" Basic shortcuts definitions
"  most in visual mode / selection (v or ⇧ v)
"

" indent / deindent after selecting the text with (⇧ v), (.) to repeat.
vnoremap <Tab> >
vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Disable tComment to escape some entities
""let g:tcomment#replacements_xml={}
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Cut, Paste, Copy
vmap <C-x> d
vmap <C-v> p
vmap <C-c> y
" Undo, Redo (broken)
nnoremap <C-z>  :undo<CR>
inoremap <C-z>  <Esc>:undo<CR>
nnoremap <C-y>  :redo<CR>
inoremap <C-y>  <Esc>:redo<CR>
" OPTION z -> UNDO
nnoremap <D-z>  :undo<CR>
inoremap <D-z>  <Esc>:undo<CR>

" OPTION Z -> redo
nnoremap <D-Z>  :redo<CR>
inoremap <D-Z>  <Esc>:redo<CR>

" OPTION y REDO
nnoremap <D-y>  :redo<CR>
inoremap <D-y>  <Esc>:redo<CR>





" Mark ALL
nnoremap <C-a> <esc>ggVG<CR>
nnoremap <D-a> <esc>ggVG<CR>


" OPTION+M Terminal
nnoremap <D-m> :FloatermToggle<CR>
inoremap <D-m> :FloatermToggle<CR>
tnoremap <D-m> <C-\><C-n>:FloatermToggle<CR>



" OPTION + e -> GoDef
nnoremap <D-e> :GoDef<CR>
inoremap <D-e> :GoDef<CR>





set synmaxcol=240

" OPTION+P / CTRL+P
nnoremap <D-p> :GFiles --cached --others --exclude-standard  <CR>
inoremap <D-p> <esc>:GFiles --cached --others --exclude-standard  <CR>
nnoremap <C-p> :GFiles --cached --others --exclude-standard  <CR>
inoremap <C-p> <esc>:GFiles --cached --others --exclude-standard  <CR>



" OPTION + LEFT/RIGHT - navigate TABS
nnoremap <D-Left>  :tabprevious<CR>
inoremap <D-Left>  <Esc>:tabprevious<CR>i
nnoremap <D-Right>  :tabnext<CR>
inoremap <D-Right>  <Esc>:tabnext<CR>i

" OPTION + t  -> new TAB
nnoremap <D-t>  :tabnew<CR>
inoremap <D-t>  <Esc>:tabnew<CR>i
" OPTION + w -> close tab
"
nnoremap <D-w>  :tabclose<CR>
inoremap <D-w>  <Esc>:tabclose<CR>i

" lazy ':'

nnoremap <Leader>p :set paste<CR>
nnoremap <Leader>f :ALEFix<CR>
nnoremap <Leader>o :set nopaste<CR>




" this machine config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

function! TabCloseRight(bang)
    let cur=tabpagenr()
    while cur < tabpagenr('$')
        exe 'tabclose' . a:bang . ' ' . (cur + 1)
    endwhile
endfunction

function! TabCloseLeft(bang)
    while tabpagenr() > 1
        exe 'tabclose' . a:bang . ' 1'
    endwhile
endfunction

command! -bang Tabcloseright call TabCloseRight('<bang>')
command! -bang Tabcloseleft call TabCloseLeft('<bang>')



"CoC
" if hidden not set, TextEdit might fail.


" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300


" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <C-space> coc#refresh()

" Use <cr> for confirm completion.
" Coc only does snippet and additional edit on confirm.
""inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


